module Testcontainers
  class DockerContainer
    attr_accessor name: String?, image: String, command: Array[String]?, exposed_ports: Hash[String, Hash[untyped, untyped]]?,
                  port_bindings: Hash[String, Array[Hash[String, String]]]?, volumes: Hash[String, Hash[untyped, untyped]]?,
                  filesystem_binds: Array[String]?, env: Array[String]?, labels: Hash[String, String]?,
                  working_dir: String?, logger: Logger

    attr_reader _container: Docker::Container?, _id: String?

    def initialize: (String image, ?command: Array[String], ?name: String, ?exposed_ports: Hash[String, Hash[untyped, untyped]],
                     ?port_bindings: Hash[String, Array[Hash[String, String]]], ?volumes: Hash[String, Hash[untyped, untyped]],
                     ?filesystem_binds: Array[String], ?env: Array[String], ?labels: Hash[String, String],
                     ?working_dir: String, ?client_opts: Hash[Symbol, untyped], ?logger: Logger) -> void

    def add_env: (String | Hash[String, String] env_or_key, ?String value) -> Array[String]

    def add_exposed_port: (Integer | String port) -> Hash[String, Hash[untyped, untyped]]

    def add_exposed_ports: (*Array[Integer | String] | Array[Integer | String] ports) -> Hash[String, Hash[untyped, untyped]]

    def add_fixed_exposed_port: (Integer | String | Hash[Integer | String, Integer | String] container_port, ?Integer | String host_port) -> Hash[String, Array[Hash[String, String]]]

    def add_volume: (String volume) -> Hash[String, Hash[untyped, untyped]]

    def add_volumes: (?Hash[String, Hash[untyped, untyped]] volumes) -> Hash[String, Hash[untyped, untyped]]

    def add_filesystem_bind: (String | Hash[String, String] host_or_hash, ?String container_path, ?String mode) -> Array[String]

    def add_filesystem_binds: (Array[String] | Hash[String, String] | String filesystem_binds) -> Array[String]

    def add_label: (String label, String value) -> Hash[String, String]

    def add_labels: (Hash[String, String] labels) -> Hash[String, String]

    def with: (Hash[Symbol, untyped] options) -> self

    def with_command: (*Array[String] | Array[String] parts) -> self

    def with_name: (String name) -> self

    def with_env: (String | Hash[String, String] env_or_key, ?String value) -> self

    def with_working_dir: (String working_dir) -> self

    def with_exposed_ports: (*Array[Integer | String] | Array[Integer | String] ports) -> self

    def with_fixed_exposed_port: (Integer | String | Hash[Integer | String, Integer | String] container_port, ?Integer | String host_port) -> self

    def with_volumes: (?Hash[String, Hash[untyped, untyped]] volumes) -> self

    def with_filesystem_binds: (Array[String] | Hash[String, String] | String filesystem_binds) -> self

    def with_labels: (Hash[String, String] labels) -> self

    def start: () -> self

    def stop: (?Bool force) -> self

    def stop!: () -> self

    def kill: (?String signal) -> self

    def remove: () -> self

    def delete: () -> self

    def restart: () -> self

    def status: () -> String

    def dead?: () -> Bool

    def paused?: () -> Bool

    def restarting?: () -> Bool

    def running?: () -> Bool

    def exited?: () -> Bool

    def healthy?: () -> Bool

    def support_healthcheck?: () -> Bool

    def exists?: () -> Bool

    def created_at: () -> String

    def info: () -> Hash[String, untyped]

    def host: () -> String

    def mapped_port: (Integer | String port) -> String

    def logs: (Bool stdout, Bool stderr) -> Array[String]

    def exec: (Array[String] cmd, ?Bool tty, ?Bool detach, ?String user, ?Bool stdin, ?Bool stdout, ?Bool stderr, ?Integer wait, ?Hash[String]) -> Array[String]

    def wait_for_logs: (Regex matcher, ?Integer timeout, ?Float interval) -> Bool

    def wait_for_healthcheck: (?Integer timeout, ?Float interval) -> Bool

    def wait_for_tcp_port: (Integer port, ?Integer timeout, ?Float interval) -> Bool

    def wait_for_http: (?Integer timeout, ?Float interval, ?String path, ?Integer container_port, ?Bool https, ?Integer status) -> Bool
  end
end
